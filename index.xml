<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>#anooptube</title>
    <link>https://anooptube.in/</link>
    <description>Recent content on #anooptube</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 20 Jan 2025 16:34:48 +0530</lastBuildDate><atom:link href="https://anooptube.in/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Understanding Stateless and Stateful Widgets in Flutter</title>
      <link>https://anooptube.in/blog/post34/</link>
      <pubDate>Mon, 20 Jan 2025 16:34:48 +0530</pubDate>
      
      <guid>https://anooptube.in/blog/post34/</guid>
      <description>Flutter, Google&amp;rsquo;s UI toolkit, enables developers to build natively compiled applications for mobile, web, and desktop from a single codebase.
At the heart of Flutter&amp;rsquo;s UI framework are widgets, which form the building blocks of any application. In this article, we will explore two fundamental types of widgets in Flutter:
 Stateless Widgets Stateful Widgets.    .youtube-thumbnail-container { position: relative; display: inline-block; max-width: 100%; cursor: pointer; overflow: hidden; } .</description>
    </item>
    
    <item>
      <title>Build Your First Mobile-App in Flutter</title>
      <link>https://anooptube.in/blog/post33/</link>
      <pubDate>Mon, 13 Jan 2025 21:16:51 +0530</pubDate>
      
      <guid>https://anooptube.in/blog/post33/</guid>
      <description>What is Flutter? Flutter is a UI toolkit that is open-source and created by Google, enabling developers to build natively compiled applications for various platforms using a single codebase.
It supports building apps for:
 Mobile: Android and iOS Web: Modern browsers Desktop: Windows, macOS, and Linux Embedded Devices    .youtube-thumbnail-container { position: relative; display: inline-block; max-width: 100%; cursor: pointer; overflow: hidden; } .youtube-thumbnail-container img.thumbnail { display: block; width: 100%; height: auto; transition: transform 0.</description>
    </item>
    
    <item>
      <title>My Projects</title>
      <link>https://anooptube.in/page/projects/</link>
      <pubDate>Thu, 10 Oct 2024 17:07:00 +0530</pubDate>
      
      <guid>https://anooptube.in/page/projects/</guid>
      <description>1. Home Loan Prepayment Calculator  Calculate your home loan prepayment savings and payoff timeline using this simple, interactive tool Get a detailed breakdown of monthly payments and savings.  Try Calculator  2. AV-Invoice  Invoice/Quotation generator Website Exclusively for Small Shops and Inventories. Developed with PHP &amp;amp; MySQL  For More details and demo Contact @ anooppkrishnan96@gmail.com  3. ToDo Android Application  Application available on Play store (ToDo) Android Application &amp;amp; Sqlite  View on Google Play atOptions = { &#39;key&#39; : &#39;7bcf1a30bafb5e9c097af1c911fd1119&#39;, &#39;format&#39; : &#39;iframe&#39;, &#39;height&#39; : 250, &#39;width&#39; : 300, &#39;params&#39; : {} };  </description>
    </item>
    
    <item>
      <title>You should know these 5 Powerful functions in Python!</title>
      <link>https://anooptube.in/blog/post32/</link>
      <pubDate>Sun, 10 Mar 2024 22:01:01 +0530</pubDate>
      
      <guid>https://anooptube.in/blog/post32/</guid>
      <description>Welcome to our comprehensive guide on mastering essential Python functions that every developer should know.
Whether you&amp;rsquo;re just starting your programming journey or looking to enhance your skills, these fundamental functions are key to becoming a proficient Python coder.
Let&amp;rsquo;s dive into each function and explore real-world examples to solidify your understanding.
  .youtube-thumbnail-container { position: relative; display: inline-block; max-width: 100%; cursor: pointer; overflow: hidden; } .youtube-thumbnail-container img.thumbnail { display: block; width: 100%; height: auto; transition: transform 0.</description>
    </item>
    
    <item>
      <title>Mastering AWK in Linux</title>
      <link>https://anooptube.in/blog/post31/</link>
      <pubDate>Sun, 03 Mar 2024 17:15:32 +0530</pubDate>
      
      <guid>https://anooptube.in/blog/post31/</guid>
      <description>Awk is a powerful programming language and command-line utility in Unix and Unix-like operating systems, including Linux.
It is primarily used for pattern scanning and processing.
  .youtube-thumbnail-container { position: relative; display: inline-block; max-width: 100%; cursor: pointer; overflow: hidden; } .youtube-thumbnail-container img.thumbnail { display: block; width: 100%; height: auto; transition: transform 0.3s ease; } .youtube-thumbnail-container .play-button { position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 80px; height: 80px; background: rgba(255, 0, 0, 0.</description>
    </item>
    
    <item>
      <title>Install Python-3 on Ubuntu and PyCharm Community Edition</title>
      <link>https://anooptube.in/blog/post30/</link>
      <pubDate>Tue, 20 Feb 2024 17:42:17 +0530</pubDate>
      
      <guid>https://anooptube.in/blog/post30/</guid>
      <description>https://doruffleton.com/4/7118622 Python is a versatile and widely-used programming language, and Ubuntu is one of the most popular Linux distributions.
In this blog post, we will walk you through the process of
 Installing Python 3 on Ubuntu Setting up PyCharm Community Edition, a powerful Python IDE.    .youtube-thumbnail-container { position: relative; display: inline-block; max-width: 100%; cursor: pointer; overflow: hidden; } .youtube-thumbnail-container img.thumbnail { display: block; width: 100%; height: auto; transition: transform 0.</description>
    </item>
    
    <item>
      <title>YouTube Thumbnail changes with Python</title>
      <link>https://anooptube.in/blog/post29/</link>
      <pubDate>Tue, 20 Feb 2024 13:31:26 +0530</pubDate>
      
      <guid>https://anooptube.in/blog/post29/</guid>
      <description>YouTube thumbnails play a crucial role in attracting viewers and conveying the essence of your video.
Regularly updating your video thumbnails can enhance the visual appeal of your channel and encourage more clicks.
In this tutorial, we will explore how to automate YouTube thumbnail changes using a Python script.
  .youtube-thumbnail-container { position: relative; display: inline-block; max-width: 100%; cursor: pointer; overflow: hidden; } .youtube-thumbnail-container img.thumbnail { display: block; width: 100%; height: auto; transition: transform 0.</description>
    </item>
    
    <item>
      <title>Mastering Linux Commands</title>
      <link>https://anooptube.in/blog/post28/</link>
      <pubDate>Mon, 12 Feb 2024 16:02:05 +0530</pubDate>
      
      <guid>https://anooptube.in/blog/post28/</guid>
      <description>Mastering Linux Commands: A Comprehensive Guide for Beginners Welcome to the world of Linux, where the command line is your gateway to a powerful and efficient operating system.
In this blog post, we will delve into essential Linux commands that every user, especially beginners, should master.
These commands form the foundation of navigating and manipulating the Linux file system, enabling you to become proficient in managing files and directories.
  .</description>
    </item>
    
    <item>
      <title>To-Do List App in Python</title>
      <link>https://anooptube.in/blog/post27/</link>
      <pubDate>Thu, 08 Feb 2024 21:49:14 +0530</pubDate>
      
      <guid>https://anooptube.in/blog/post27/</guid>
      <description>Creating a Todo List Command Line Application in Python Prerequisites : Make sure you have Python installed on your system.
In this tutorial, we will create a simple command-line Todo List application using Python. The application allows users to
 add tasks, list tasks, remove tasks, add labels to tasks, and clear all tasks.    .youtube-thumbnail-container { position: relative; display: inline-block; max-width: 100%; cursor: pointer; overflow: hidden; } .</description>
    </item>
    
    <item>
      <title>Constants (const)</title>
      <link>https://anooptube.in/blog/post26/</link>
      <pubDate>Sat, 09 Sep 2023 14:20:20 +0530</pubDate>
      
      <guid>https://anooptube.in/blog/post26/</guid>
      <description>In C++, the const keyword is used to declare a constant or to specify that a variable or function parameter should not be modified.
  .youtube-thumbnail-container { position: relative; display: inline-block; max-width: 100%; cursor: pointer; overflow: hidden; } .youtube-thumbnail-container img.thumbnail { display: block; width: 100%; height: auto; transition: transform 0.3s ease; } .youtube-thumbnail-container .play-button { position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 80px; height: 80px; background: rgba(255, 0, 0, 0.</description>
    </item>
    
    <item>
      <title>C&#43;&#43; Reference (&amp;)</title>
      <link>https://anooptube.in/blog/post25/</link>
      <pubDate>Sun, 27 Aug 2023 18:56:49 +0530</pubDate>
      
      <guid>https://anooptube.in/blog/post25/</guid>
      <description>In C++, references are a way to create an alias for an existing variable. They provide an alternative name to access the same memory location as the original variable. References are often used for passing arguments to functions, especially to avoid making copies of large objects.
There are two main types of references in C++:
 references (also known as lvalue references) const references.  1. Reference (&amp;amp;) Syntax: type &amp;amp;referenceName = existingVariable; A reference must be initialized when declared.</description>
    </item>
    
    <item>
      <title>Recursion</title>
      <link>https://anooptube.in/blog/post24/</link>
      <pubDate>Sat, 17 Jun 2023 22:06:52 +0530</pubDate>
      
      <guid>https://anooptube.in/blog/post24/</guid>
      <description>Recursion is a programming concept where a function calls itself during its execution. In C++, recursion allows you to solve complex problems by breaking them down into smaller, simpler versions of the same problem.
To implement recursion in C++, you typically define a function that calls itself until it reaches a base case, which is a condition that terminates the recursive calls.
For Example, in order to print n numbers, the base concept is output the a given number and the condition is to print the number is less than or equal to the given limit say n.</description>
    </item>
    
    <item>
      <title>Function Objects</title>
      <link>https://anooptube.in/blog/post23/</link>
      <pubDate>Fri, 02 Jun 2023 21:48:13 +0530</pubDate>
      
      <guid>https://anooptube.in/blog/post23/</guid>
      <description>In C++, a function can be treated as an object using function pointers or function objects (also known as functors). Function objects are objects that can be invoked like functions.
They provide a way to encapsulate a function within an object, allowing it to be passed around, stored in data structures, or used in algorithms that require callable entities.
A functions can be treated as first-class citizens, meaning they can be assigned to variables, passed as arguments to other functions, and returned from functions.</description>
    </item>
    
    <item>
      <title>Friend Function</title>
      <link>https://anooptube.in/blog/post22/</link>
      <pubDate>Mon, 24 Apr 2023 18:34:49 +0530</pubDate>
      
      <guid>https://anooptube.in/blog/post22/</guid>
      <description>In C++, classes have three access modifiers that determine the level of access to class members. These are: public, private, and protected.
Private and protected members are accessible only within the class and its subclasses, whereas public members are accessible anywhere.
Private members are declared with the private keyword in the class definition. Private members cannot be accessed outside of the class or its friend functions. This means that only the members of the class or its friend functions can access them.</description>
    </item>
    
    <item>
      <title>Pure Virtual Functions</title>
      <link>https://anooptube.in/blog/post21/</link>
      <pubDate>Thu, 20 Apr 2023 21:51:16 +0530</pubDate>
      
      <guid>https://anooptube.in/blog/post21/</guid>
      <description>In C++, a pure virtual function is a virtual function that is declared in a base class but does not provide an implementation.
Syntax: virtual return_type functionName(parameters) = 0; Where  = 0  at the end of the declaration indicates that the function is pure virtual.
A class that contains one or more pure virtual functions is called an abstract class, and it cannot be instantiated (can not create an object for this class).</description>
    </item>
    
    <item>
      <title>Virtual Functions</title>
      <link>https://anooptube.in/blog/post20/</link>
      <pubDate>Thu, 20 Apr 2023 18:58:41 +0530</pubDate>
      
      <guid>https://anooptube.in/blog/post20/</guid>
      <description>In C++, a virtual function is a member function of a class that can be overridden in a derived class. When a virtual function is called on a derived class object, the function of the derived class is called instead of the function of the base class. This is known as dynamic binding or runtime polymorphism.
Syntax: virtual return_type functionName() { //body of the function  return statement; } Suppose we have a base class named Shape and three derived classes named Circle and Rectangle and Triangle.</description>
    </item>
    
    <item>
      <title>Ghost Hunter Game - Part-2</title>
      <link>https://anooptube.in/blog/post19/</link>
      <pubDate>Sun, 16 Apr 2023 18:38:24 +0530</pubDate>
      
      <guid>https://anooptube.in/blog/post19/</guid>
      <description>Part-1 link  Code Related Explanations   First we have to create a Project Directory TheGhostHunter.
  Create 3 directories (folders)
 assets This folder for storing all resources like images, fonts etc. css This folder for storing all stylesheets related with html files. js This folder for storing all javascripts related with html files.    Create a file called index.html in TheGhostHunter (called root directory for this project).</description>
    </item>
    
    <item>
      <title>Ghost Hunter Game - Part-1</title>
      <link>https://anooptube.in/blog/post18/</link>
      <pubDate>Fri, 14 Apr 2023 21:38:33 +0530</pubDate>
      
      <guid>https://anooptube.in/blog/post18/</guid>
      <description>This math game is called &amp;ldquo;The Ghost Hunter&amp;rdquo;. In this game, a ghost appears with a math problem that has two numbers and an operation, such as &amp;ldquo;7 + 3&amp;rdquo;. The player then needs to match the correct answer with a witch who is holding a sign with the answer, such as &amp;ldquo;10&amp;rdquo;. The player needs to match the ghost with the correct witch holding the correct answer as quickly as possible to score points.</description>
    </item>
    
    <item>
      <title>Arrow Operator</title>
      <link>https://anooptube.in/blog/post17/</link>
      <pubDate>Sat, 01 Apr 2023 19:50:04 +0530</pubDate>
      
      <guid>https://anooptube.in/blog/post17/</guid>
      <description>We can create a pointer variable for Complex data types such as struct and class. Also we can create a pointer for class and struct in stack and heap As similar as primitive data types.
Syntax className *pointerName; pointerName = &amp;amp;classObjectName; Example struct Student { int mark; std::string name; }; int main(int argc, char const *argv[]) { Student s; s.mark = 10; s.name = &amp;#34;ANOOP&amp;#34;; Student *sPtr = &amp;amp;s; } Accessing data members using pointer: We can access data members of a struct/class pointer variable by using * operator with .</description>
    </item>
    
    <item>
      <title>New and Delete Operators</title>
      <link>https://anooptube.in/blog/post16/</link>
      <pubDate>Wed, 29 Mar 2023 19:23:16 +0530</pubDate>
      
      <guid>https://anooptube.in/blog/post16/</guid>
      <description>C++ allows us to create variables at runtime. The variable can be created in Stack memory or Heap memory.
Memory Layout in C++ Stack Memory Functions are allocated stack memory every time they are called by the machine. Whenever a new local variable is declared, more stack memory is allocated to store the variable in that function.
Stacks grow downward when such allocations are made. All local variables of this function become invalid after the function returns, since the stack memory of this function is deallocated.</description>
    </item>
    
    <item>
      <title>Basics Of Pointers</title>
      <link>https://anooptube.in/blog/post15/</link>
      <pubDate>Sat, 18 Mar 2023 19:41:47 +0530</pubDate>
      
      <guid>https://anooptube.in/blog/post15/</guid>
      <description>A pointer is a special type of variable that can hold the memory address of an another variable.
Overview of C++ Pointers 1. Accessing address of a variable We can access the memory address of a variable by &amp;amp; symbol
int x = 10; &amp;amp;x // gives the memory address  Example #include &amp;lt;iostream&amp;gt; int main() { int mark = 300; int age = 24; int salary = 17000; std::cout &amp;lt;&amp;lt; &amp;#34;Address of mark: &amp;#34;&amp;lt;&amp;lt; &amp;amp;mark &amp;lt;&amp;lt; std::endl; std::cout &amp;lt;&amp;lt; &amp;#34;Address of age: &amp;#34; &amp;lt;&amp;lt; &amp;amp;age &amp;lt;&amp;lt; std::endl; std::cout &amp;lt;&amp;lt; &amp;#34;Address of salary: &amp;#34; &amp;lt;&amp;lt; &amp;amp;salary &amp;lt;&amp;lt; std::endl; } 2.</description>
    </item>
    
    <item>
      <title>Function Overriding</title>
      <link>https://anooptube.in/blog/post14/</link>
      <pubDate>Wed, 15 Mar 2023 23:08:47 +0530</pubDate>
      
      <guid>https://anooptube.in/blog/post14/</guid>
      <description>Our knowledge of inheritance begins with the fact that we can create derived classes from a base class, which is one of the core features of OOP. A derived class inherits the features of a base class.
Assume that the same function is defined in both the derived class and the based class. When we call this function using the object of the derived class, the derived class&amp;rsquo;s function is executed.</description>
    </item>
    
    <item>
      <title>Inheritance</title>
      <link>https://anooptube.in/blog/post13/</link>
      <pubDate>Thu, 05 Jan 2023 15:50:10 +0530</pubDate>
      
      <guid>https://anooptube.in/blog/post13/</guid>
      <description>C++ supports inheritance as a key feature of Object Oriented Programming (OOP). It is a method for creating new classes (derived classes) from existing classes (base classes).
Base class and Derived class A derived class inherits the features of a base class as well as its own features.
Each shape has two properties, for example area and perimeter. And child classes should be able to access these properties, so we have given them the protected access specifier.</description>
    </item>
    
    <item>
      <title>C v/s C&#43;&#43;</title>
      <link>https://anooptube.in/blog/post12/</link>
      <pubDate>Mon, 26 Dec 2022 19:07:45 +0530</pubDate>
      
      <guid>https://anooptube.in/blog/post12/</guid>
      <description>1. File Extension:  C - Files are saved with .c extension. C++ - Files are saved with .cpp extension.  2. Area of usage:  C - Embedded devices And system-level code. C++ - Gaming,networking and server-side applications.  3. Compatibility:  C - The C compiler isn’t able to execute the C++ code. C++ - C++ is a superset of C so C++ is able to run most C code.</description>
    </item>
    
    <item>
      <title>C&#43;&#43; Input and Output Functions</title>
      <link>https://anooptube.in/blog/post11/</link>
      <pubDate>Wed, 14 Dec 2022 19:36:41 +0530</pubDate>
      
      <guid>https://anooptube.in/blog/post11/</guid>
      <description>1. Output Functions. The output functions display the results to the user.
User ---/ Result/Output -- Syntax: #include &amp;lt;iostream&amp;gt; std::cout &amp;lt;&amp;lt; &amp;#34;message&amp;#34; ; std::cout &amp;lt;&amp;lt; variables; Example: #include &amp;lt;iostream&amp;gt; int main() { // print strings  std::cout &amp;lt;&amp;lt; &amp;#34;Welcome to #anooptube\n&amp;#34;; int age = 18; double salary = 12000.50; // print the variables  std::cout &amp;lt;&amp;lt; age &amp;lt;&amp;lt; std::endl; std::cout &amp;lt;&amp;lt; salary &amp;lt;&amp;lt; std::endl; // print two or more variables  std::cout &amp;lt;&amp;lt; &amp;#34;Your age is: &amp;#34; &amp;lt;&amp;lt; age &amp;lt;&amp;lt; &amp;#34; and salary is: &amp;#34; &amp;lt;&amp;lt; salary &amp;lt;&amp;lt; std::endl; return 0; } To print a new line, use std::endl or \n</description>
    </item>
    
    <item>
      <title>Abstraction &amp; Encapsulation</title>
      <link>https://anooptube.in/blog/post10/</link>
      <pubDate>Sat, 03 Dec 2022 14:52:58 +0530</pubDate>
      
      <guid>https://anooptube.in/blog/post10/</guid>
      <description>1. Abstraction Data Abstraction involves presenting only the essential details to the outside world, i.e., representing only the essential details inside the program, and hiding the other details.
How to achieve Abstraction 1. By Header files. Example:
 Create a header file person.h  // person.h  #ifndef ANOOP_TUBE_PERSON_H #define ANOOP_TUBE_PERSON_H  #include&amp;lt;iostream&amp;gt; class Person { public: Person(std::string name_); std::string getName(); void setName(std::string name_); private: std::string name; }; #endif create a file person.</description>
    </item>
    
    <item>
      <title>Create Header Files</title>
      <link>https://anooptube.in/blog/post9/</link>
      <pubDate>Sat, 03 Dec 2022 12:49:20 +0530</pubDate>
      
      <guid>https://anooptube.in/blog/post9/</guid>
      <description>A header file contains the declarations and definitions of functions and macros.
Types:  System header files.  Example : iostream , vector, string ..etc.
User defined header files.  How to use header files We use a special pre-processor directive called #include to use/include header files.
Syntax for System header files: #include &amp;lt;header_file_name&amp;gt; Example: #include &amp;lt;iostream&amp;gt;#include &amp;lt;vector&amp;gt; Syntax for User defined header files: #include &amp;#34;path/to/header_file_name.h&amp;#34; Example: #include &amp;#34;anooptube.h&amp;#34;#include &amp;#34;my_header_file.h Make your own header file and use it.</description>
    </item>
    
    <item>
      <title>How to create a namespace in C&#43;&#43;</title>
      <link>https://anooptube.in/blog/post8/</link>
      <pubDate>Wed, 30 Nov 2022 19:13:59 +0530</pubDate>
      
      <guid>https://anooptube.in/blog/post8/</guid>
      <description>In C++ programming, a namespace is a collection of names or identifiers related to one another.
Syntax: namespace namespace_name { // code here } Example: namespace anooptube_namespace { int getName() { std::cout &amp;lt;&amp;lt; &amp;#34;#anooptube&amp;#34; &amp;lt;&amp;lt; std::endl; } } How to create a arithmetic namespace Step-1:   Create a header file named  arithmetic.h 
  Add header guards.
  // arithmetic.h  #ifndef ANOOPTUBE_ARITHMETIC_H #define ANOOPTUBE_ARITHMETIC_H  #endif Add namespace declaration.</description>
    </item>
    
    <item>
      <title>Privacy Policy</title>
      <link>https://anooptube.in/privacy/</link>
      <pubDate>Tue, 29 Nov 2022 17:51:34 +0530</pubDate>
      
      <guid>https://anooptube.in/privacy/</guid>
      <description>At #anooptube, accessible from https://anooptube.in  , one of our main priorities is the privacy of our visitors. This Privacy Policy document contains types of information that is collected and recorded by #anooptube and how we use it.
If you have additional questions or require more information about our Privacy Policy, do not hesitate to contact us.
This Privacy Policy applies only to our online activities and is valid for visitors to our website with regards to the information that they shared and/or collect in #anooptube.</description>
    </item>
    
    <item>
      <title>String snd Boolean</title>
      <link>https://anooptube.in/blog/post6/</link>
      <pubDate>Fri, 18 Nov 2022 22:51:46 +0530</pubDate>
      
      <guid>https://anooptube.in/blog/post6/</guid>
      <description>1. Boolean  bool is a data type which can hold the values true or false.  Syntax: bool varName = value; Example: #include &amp;lt;iostream&amp;gt; int main() { bool varName1 = true; bool varName2 = false; std::cout &amp;lt;&amp;lt; varName1 &amp;lt;&amp;lt; std::endl; std::cout &amp;lt;&amp;lt; varName2 &amp;lt;&amp;lt; std::endl; int age; std::cout &amp;lt;&amp;lt; &amp;#34;Enter your age:&amp;#34;; std::cin &amp;gt;&amp;gt; age; bool isGreater18 = age &amp;gt;= 18; std::cout &amp;lt;&amp;lt; &amp;#34;isGreater18: &amp;#34; &amp;lt;&amp;lt; isGreater18; } Related videos: link 2.</description>
    </item>
    
    <item>
      <title>Class and Objects in C&#43;&#43;</title>
      <link>https://anooptube.in/blog/post5/</link>
      <pubDate>Fri, 18 Nov 2022 22:45:30 +0530</pubDate>
      
      <guid>https://anooptube.in/blog/post5/</guid>
      <description>1. Class   A class is a template(prototype) for the object.
  class is collection of data and its functions/methods
  Related videos link --  --  -- Syntax: class ClassName { // body of class  access_specifier: // data  // methods / functions  }; Example: class Rectangle { public: // data members  double length; double width; // functions / methods  double getArea() { return length * width; } }; 2.</description>
    </item>
    
    <item>
      <title>Constructor &amp; Destructor</title>
      <link>https://anooptube.in/blog/post4/</link>
      <pubDate>Fri, 18 Nov 2022 22:45:26 +0530</pubDate>
      
      <guid>https://anooptube.in/blog/post4/</guid>
      <description>1. Constructor  A special type of member function. Constructor called automatically when an object is created. Constructor Name is same as Class Name. Constructor has no return type.  Related videos link Constructor Types  Default Constructor. Parameterized Constructor.  2. Destructor  A special type of member function. Destructor called automatically when an object is deleted. Destructor Name is same as Class Name. Destructor has no return type.  atOptions = { &#39;key&#39; : &#39;7bcf1a30bafb5e9c097af1c911fd1119&#39;, &#39;format&#39; : &#39;iframe&#39;, &#39;height&#39; : 250, &#39;width&#39; : 300, &#39;params&#39; : {} };   Example Program class Rectangle { public: // Default Constructor  Rectangle() { std::cout &amp;lt;&amp;lt; &amp;#34;Default Constructor called&amp;#34; &amp;lt;&amp;lt; std::endl; length = 0; width = 0; } // Parameterized Constructor  Rectangle(int len, int wid) { std::cout &amp;lt;&amp;lt; &amp;#34;Parameterized Constructor called&amp;#34; &amp;lt;&amp;lt; std::endl; length = len; width = wid; } // Destructor  ~Rectangle() { std::cout &amp;lt;&amp;lt; &amp;#34;Destructor called &amp;#34; &amp;lt;&amp;lt; std::endl; } // functions  double getArea() { return length * width; } // data members  double length; double width; }; int main() { // Program start here  Rectangle r1(20,20); // accessing the members  // dot operator &amp;#34;.</description>
    </item>
    
    <item>
      <title>Operator Overloading</title>
      <link>https://anooptube.in/blog/post3/</link>
      <pubDate>Fri, 18 Nov 2022 22:45:15 +0530</pubDate>
      
      <guid>https://anooptube.in/blog/post3/</guid>
      <description>A special function  operator  can be used to overload operators.
Related videos  Part-1 - link  Part-2 - link   Syntax return_type operator operator_symbol(arguments) { //body  return value } where operator_symbol can be
%, +, -, *, / , ++, --, !, ==, !=, &amp;gt;=, &amp;lt;= , &amp;amp;&amp;amp; , || , =, +=,*=, /=,-=, %= , [ ], &amp;amp;, |, &amp;lt;&amp;lt;, &amp;gt;&amp;gt;, ^, ~ 4 operators that cannot be overloaded in C++ 1.</description>
    </item>
    
    <item>
      <title>Overloading in C&#43;&#43;</title>
      <link>https://anooptube.in/blog/post2/</link>
      <pubDate>Fri, 18 Nov 2022 20:04:52 +0530</pubDate>
      
      <guid>https://anooptube.in/blog/post2/</guid>
      <description>Types Of Overloading   Constructor Overloading
  Function Overloading
  Related video link 1. Constructor Overloading   All constructors have same name but
  different number of arguments
  #include&amp;lt;iostream&amp;gt; class Rectangle { public: // Constructor  Rectangle() { length = 0; width = 0; } Rectangle(double len, double wid) { length = len; width = wid; } Rectangle(double side) { length = side; width = side; } void print() { std::cout &amp;lt;&amp;lt; &amp;#34;length: &amp;#34;&amp;lt;&amp;lt; length &amp;lt;&amp;lt; std::endl; std::cout &amp;lt;&amp;lt; &amp;#34;width: &amp;#34;&amp;lt;&amp;lt; width &amp;lt;&amp;lt; std::endl; } double length; double width; }; int main(int argc, char const *argv[]) { Rectangle r1; r1.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://anooptube.in/page/about/</link>
      <pubDate>Thu, 17 Nov 2022 23:12:29 +0530</pubDate>
      
      <guid>https://anooptube.in/page/about/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Access Modifiers/Specifiers</title>
      <link>https://anooptube.in/blog/post1/</link>
      <pubDate>Thu, 17 Nov 2022 23:12:05 +0530</pubDate>
      
      <guid>https://anooptube.in/blog/post1/</guid>
      <description>Types Of Access Specifiers  Public Private Protected  Related videos link 1. Public public members can be access from any part of the program.
class Rectangle { public: Rectangle() { length = 0; width = 0; } Rectangle(double l, double w) { length = l; width = w; } double getArea() { return length * width; } double length, width; }; int main(int argc, char const *argv[]) { Rectangle r1(10,20); std::cout &amp;lt;&amp;lt; &amp;#34;length :&amp;#34; &amp;lt;&amp;lt; r1.</description>
    </item>
    
  </channel>
</rss>
