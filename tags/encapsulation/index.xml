<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>encapsulation on #anooptube</title>
    <link>https://anooptube.in/tags/encapsulation/</link>
    <description>Recent content in encapsulation on #anooptube</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 03 Dec 2022 14:52:58 +0530</lastBuildDate><atom:link href="https://anooptube.in/tags/encapsulation/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Abstraction &amp; Encapsulation</title>
      <link>https://anooptube.in/blog/post10/</link>
      <pubDate>Sat, 03 Dec 2022 14:52:58 +0530</pubDate>
      
      <guid>https://anooptube.in/blog/post10/</guid>
      <description>1. Abstraction Data Abstraction involves presenting only the essential details to the outside world, i.e., representing only the essential details inside the program, and hiding the other details.
How to achieve Abstraction 1. By Header files. Example:
Create a header file person.h // person.h #ifndef ANOOP_TUBE_PERSON_H #define ANOOP_TUBE_PERSON_H #include&amp;lt;iostream&amp;gt; class Person { public: Person(std::string name_); std::string getName(); void setName(std::string name_); private: std::string name; }; #endif create a file person.cpp include person.</description>
    </item>
    
  </channel>
</rss>
