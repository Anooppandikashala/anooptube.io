[{"categories":null,"contents":"1. Class A class is a template(prototype) for the object.\nclass is collection of data and its functions/methods\nRelated videos link Syntax: class ClassName { // body of class access_specifier: // data // methods / functions }; Example: class Rectangle { public: // data members double length; double width; // functions / methods double getArea() { return length * width; } }; 2. Objects Object is an instance of class The allocation of memory only occurs when an object is created Syntax: className objectName; Example: int main(){ // create objects Rectangle r1; Rectangle r2,r3; } Accessing Data Members and Functions through objects We can access functions or data (public) by using .","date":"2022-11-18T22:45:30+05:30","permalink":"https://anooptube.in/blog/post5/","tags":["cpp","c++","class","objects","oops"],"title":"Class and Objects in C++"},{"categories":null,"contents":"Constructor \u0026amp; Destructor 1. Constructor A special type of member function. Constructor called automatically when an object is created. Constructor Name is same as Class Name. Constructor has no return type. Related videos link Constructor Types Default Constructor Parameterized Constructor 2. Destructor A special type of member function. Destructor called automatically when an object is deleted. Destructor Name is same as Class Name. Destructor has no return type. Example Program class Rectangle { public: // Default Constructor Rectangle() { std::cout \u0026lt;\u0026lt; \u0026#34;Default Constructor called\u0026#34; \u0026lt;\u0026lt; std::endl; length = 0; width = 0; } // Parameterized Constructor Rectangle(int len, int wid) { std::cout \u0026lt;\u0026lt; \u0026#34;Parameterized Constructor called\u0026#34; \u0026lt;\u0026lt; std::endl; length = len; width = wid; } // Destructor ~Rectangle() { std::cout \u0026lt;\u0026lt; \u0026#34;Destructor called \u0026#34; \u0026lt;\u0026lt; std::endl; } // functions double getArea() { return length * width; } // data members double length; double width; }; int main() { // Program start here Rectangle r1(20,20); // accessing the members // dot operator \u0026#34;.","date":"2022-11-18T22:45:26+05:30","permalink":"https://anooptube.in/blog/post4/","tags":["cpp","c++","overloading"],"title":"Constructor \u0026 Destructor"},{"categories":null,"contents":"Operator Overloading A special function operator can be used to overload operators\nRelated videos Part-1 - link Part-2 - link Syntax return_type operator operator_symbol(arguments) { //body return value } where operator_symbol can be\n%, +, -, *, / , ++, --, !, ==, !=, \u0026gt;=, \u0026lt;= , \u0026amp;\u0026amp; , || , =, +=,*=, /=,-=, %= , [ ], \u0026amp;, |, \u0026lt;\u0026lt;, \u0026gt;\u0026gt;, ^, ~ 4 operators that cannot be overloaded in C++ 1.","date":"2022-11-18T22:45:15+05:30","permalink":"https://anooptube.in/blog/post3/","tags":["cpp","c++","overloading"],"title":"Operator Overloading"},{"categories":null,"contents":"Types Of Overloading Constructor Overloading\nFunction Overloading\nRelated video link 1. Constructor Overloading All constructors have same name but\ndifferent number of arguments\n#include\u0026lt;iostream\u0026gt; class Rectangle { public: // Constructor Rectangle() { length = 0; width = 0; } Rectangle(double len, double wid) { length = len; width = wid; } Rectangle(double side) { length = side; width = side; } void print() { std::cout \u0026lt;\u0026lt; \u0026#34;length: \u0026#34;\u0026lt;\u0026lt; length \u0026lt;\u0026lt; std::endl; std::cout \u0026lt;\u0026lt; \u0026#34;width: \u0026#34;\u0026lt;\u0026lt; width \u0026lt;\u0026lt; std::endl; } double length; double width; }; int main(int argc, char const *argv[]) { Rectangle r1; r1.","date":"2022-11-18T20:04:52+05:30","permalink":"https://anooptube.in/blog/post2/","tags":["cpp","c++","overloading"],"title":"Overloading in C++"},{"categories":null,"contents":"","date":"2022-11-17T23:12:29+05:30","permalink":"https://anooptube.in/page/about/","tags":["about","me"],"title":"About"},{"categories":null,"contents":"Types Of Access Specifiers Public Private Protected Related videos link 1. Public public members can be access from any part of the program.\nclass Rectangle { public: Rectangle() { length = 0; width = 0; } Rectangle(double l, double w) { length = l; width = w; } double getArea() { return length * width; } double length, width; }; int main(int argc, char const *argv[]) { Rectangle r1(10,20); std::cout \u0026lt;\u0026lt; \u0026#34;length :\u0026#34; \u0026lt;\u0026lt; r1.","date":"2022-11-17T23:12:05+05:30","permalink":"https://anooptube.in/blog/post1/","tags":["cpp","c++","access_modifiers"],"title":"Access Modifiers/Specifiers"}]