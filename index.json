[{"categories":null,"contents":"C++ supports inheritance as a key feature of Object Oriented Programming (OOP). It is a method for creating new classes (derived classes) from existing classes (base classes).\nBase class and Derived class A derived class inherits the features of a base class as well as its own features.\nEach shape has two properties, for example area and perimeter. And child classes should be able to access these properties, so we have given them the protected access specifier.","date":"2023-01-05T15:50:10+05:30","permalink":"https://anooptube.in/blog/post13/","tags":["cpp","c++","inheritance","oop"],"title":"Inheritance"},{"categories":null,"contents":"1. File Extension: C - Files are saved with .c extension. C++ - Files are saved with .cpp extension. 2. Area of usage: C - Embedded devices And system-level code. C++ - Gaming,networking and server-side applications. 3. Compatibility: C - The C compiler isnâ€™t able to execute the C++ code. C++ - C++ is a superset of C so C++ is able to run most C code. 4. OOP - Compatibility: C - It does not Support Object-Oriented -Programming (OOP) C++ - It Support Object-Oriented -Programming (OOP) for more visit Class and Objects in C++","date":"2022-12-26T19:07:45+05:30","permalink":"https://anooptube.in/blog/post12/","tags":["cpp","c++","c","difference","c vs cpp"],"title":"C v/s C++"},{"categories":null,"contents":"1. Output Functions. The output functions display the results to the user.\nSyntax: #include \u0026lt;iostream\u0026gt; std::cout \u0026lt;\u0026lt; \u0026#34;message\u0026#34; ; std::cout \u0026lt;\u0026lt; variables; Example: #include \u0026lt;iostream\u0026gt; int main() { // print strings std::cout \u0026lt;\u0026lt; \u0026#34;Welcome to #anooptube\\n\u0026#34;; int age = 18; double salary = 12000.50; // print the variables std::cout \u0026lt;\u0026lt; age \u0026lt;\u0026lt; std::endl; std::cout \u0026lt;\u0026lt; salary \u0026lt;\u0026lt; std::endl; // print two or more variables std::cout \u0026lt;\u0026lt; \u0026#34;Your age is: \u0026#34; \u0026lt;\u0026lt; age \u0026lt;\u0026lt; \u0026#34; and salary is: \u0026#34; \u0026lt;\u0026lt; salary \u0026lt;\u0026lt; std::endl; return 0; } To print a new line, use std::endl or \\n","date":"2022-12-14T19:36:41+05:30","permalink":"https://anooptube.in/blog/post11/","tags":["cpp","c++","IO","io","input","output"],"title":"C++ Input and Output Functions"},{"categories":null,"contents":"1. Abstraction Data Abstraction involves presenting only the essential details to the outside world, i.e., representing only the essential details inside the program, and hiding the other details.\nHow to achieve Abstraction 1. By Header files. Example:\nCreate a header file person.h // person.h #ifndef ANOOP_TUBE_PERSON_H #define ANOOP_TUBE_PERSON_H #include\u0026lt;iostream\u0026gt; class Person { public: Person(std::string name_); std::string getName(); void setName(std::string name_); private: std::string name; }; #endif create a file person.cpp include person.","date":"2022-12-03T14:52:58+05:30","permalink":"https://anooptube.in/blog/post10/","tags":["cpp","c++","abstraction","encapsulation"],"title":"Abstraction \u0026 Encapsulation"},{"categories":null,"contents":"A header file contains the declarations and definitions of functions and macros.\nTypes: System header files. Example : iostream , vector, string ..etc.\nUser defined header files. How to use header files We use a special pre-processor directive called #include to use/include header files.\nSyntax for System header files: #include \u0026lt;header_file_name\u0026gt; Example: #include \u0026lt;iostream\u0026gt; #include \u0026lt;vector\u0026gt; Syntax for User defined header files: #include \u0026#34;path/to/header_file_name.h\u0026#34; Example: #include \u0026#34;anooptube.h\u0026#34; #include \u0026#34;my_header_file.h Make your own header file and use it.","date":"2022-12-03T12:49:20+05:30","permalink":"https://anooptube.in/blog/post9/","tags":["cpp","c++","header_guard","header_file"],"title":"Create Header Files"},{"categories":null,"contents":"In C++ programming, a namespace is a collection of names or identifiers related to one another.\nSyntax: namespace namespace_name { // code here } Example: namespace anooptube_namespace { int getName() { std::cout \u0026lt;\u0026lt; \u0026#34;#anooptube\u0026#34; \u0026lt;\u0026lt; std::endl; } } How to create a arithmetic namespace Step-1: Create a header file named arithmetic.h Add header guards.\n// arithmetic.h #ifndef ANOOPTUBE_ARITHMETIC_H #define ANOOPTUBE_ARITHMETIC_H #endif Add namespace declaration. // arithmetic.h #ifndef ANOOPTUBE_ARITHMETIC_H #define ANOOPTUBE_ARITHMETIC_H namespace arithmetic { } #endif Add required functions.","date":"2022-11-30T19:13:59+05:30","permalink":"https://anooptube.in/blog/post8/","tags":["cpp","c++","header_guard","namespace"],"title":"How to create a namespace in C++"},{"categories":null,"contents":"At #anooptube, accessible from https://anooptube.in , one of our main priorities is the privacy of our visitors. This Privacy Policy document contains types of information that is collected and recorded by #anooptube and how we use it.\nIf you have additional questions or require more information about our Privacy Policy, do not hesitate to contact us.\nThis Privacy Policy applies only to our online activities and is valid for visitors to our website with regards to the information that they shared and/or collect in #anooptube.","date":"2022-11-29T17:51:34+05:30","permalink":"https://anooptube.in/privacy/","tags":null,"title":"Privacy Policy"},{"categories":null,"contents":"1. Boolean bool is a data type which can hold the values true or false. Syntax: bool varName = value; Example: #include \u0026lt;iostream\u0026gt; int main() { bool varName1 = true; bool varName2 = false; std::cout \u0026lt;\u0026lt; varName1 \u0026lt;\u0026lt; std::endl; std::cout \u0026lt;\u0026lt; varName2 \u0026lt;\u0026lt; std::endl; int age; std::cout \u0026lt;\u0026lt; \u0026#34;Enter your age:\u0026#34;; std::cin \u0026gt;\u0026gt; age; bool isGreater18 = age \u0026gt;= 18; std::cout \u0026lt;\u0026lt; \u0026#34;isGreater18: \u0026#34; \u0026lt;\u0026lt; isGreater18; } Related videos: link 2.","date":"2022-11-18T22:51:46+05:30","permalink":"https://anooptube.in/blog/post6/","tags":["cpp","c++","string","boolean"],"title":"String snd Boolean"},{"categories":null,"contents":"1. Class A class is a template(prototype) for the object.\nclass is collection of data and its functions/methods\nRelated videos link Syntax: class ClassName { // body of class access_specifier: // data // methods / functions }; Example: class Rectangle { public: // data members double length; double width; // functions / methods double getArea() { return length * width; } }; 2. Objects Object is an instance of class. The allocation of memory only occurs when an object is created.","date":"2022-11-18T22:45:30+05:30","permalink":"https://anooptube.in/blog/post5/","tags":["cpp","c++","class","objects","oops"],"title":"Class and Objects in C++"},{"categories":null,"contents":"1. Constructor A special type of member function. Constructor called automatically when an object is created. Constructor Name is same as Class Name. Constructor has no return type. Related videos link Constructor Types Default Constructor. Parameterized Constructor. 2. Destructor A special type of member function. Destructor called automatically when an object is deleted. Destructor Name is same as Class Name. Destructor has no return type. Example Program class Rectangle { public: // Default Constructor Rectangle() { std::cout \u0026lt;\u0026lt; \u0026#34;Default Constructor called\u0026#34; \u0026lt;\u0026lt; std::endl; length = 0; width = 0; } // Parameterized Constructor Rectangle(int len, int wid) { std::cout \u0026lt;\u0026lt; \u0026#34;Parameterized Constructor called\u0026#34; \u0026lt;\u0026lt; std::endl; length = len; width = wid; } // Destructor ~Rectangle() { std::cout \u0026lt;\u0026lt; \u0026#34;Destructor called \u0026#34; \u0026lt;\u0026lt; std::endl; } // functions double getArea() { return length * width; } // data members double length; double width; }; int main() { // Program start here Rectangle r1(20,20); // accessing the members // dot operator \u0026#34;.","date":"2022-11-18T22:45:26+05:30","permalink":"https://anooptube.in/blog/post4/","tags":["cpp","c++","overloading"],"title":"Constructor \u0026 Destructor"},{"categories":null,"contents":"A special function operator can be used to overload operators.\nRelated videos Part-1 - link Part-2 - link Syntax return_type operator operator_symbol(arguments) { //body return value } where operator_symbol can be\n%, +, -, *, / , ++, --, !, ==, !=, \u0026gt;=, \u0026lt;= , \u0026amp;\u0026amp; , || , =, +=,*=, /=,-=, %= , [ ], \u0026amp;, |, \u0026lt;\u0026lt;, \u0026gt;\u0026gt;, ^, ~ 4 operators that cannot be overloaded in C++ 1.","date":"2022-11-18T22:45:15+05:30","permalink":"https://anooptube.in/blog/post3/","tags":["cpp","c++","overloading"],"title":"Operator Overloading"},{"categories":null,"contents":"Types Of Overloading Constructor Overloading\nFunction Overloading\nRelated video link 1. Constructor Overloading All constructors have same name but\ndifferent number of arguments\n#include\u0026lt;iostream\u0026gt; class Rectangle { public: // Constructor Rectangle() { length = 0; width = 0; } Rectangle(double len, double wid) { length = len; width = wid; } Rectangle(double side) { length = side; width = side; } void print() { std::cout \u0026lt;\u0026lt; \u0026#34;length: \u0026#34;\u0026lt;\u0026lt; length \u0026lt;\u0026lt; std::endl; std::cout \u0026lt;\u0026lt; \u0026#34;width: \u0026#34;\u0026lt;\u0026lt; width \u0026lt;\u0026lt; std::endl; } double length; double width; }; int main(int argc, char const *argv[]) { Rectangle r1; r1.","date":"2022-11-18T20:04:52+05:30","permalink":"https://anooptube.in/blog/post2/","tags":["cpp","c++","overloading"],"title":"Overloading in C++"},{"categories":null,"contents":"","date":"2022-11-17T23:12:29+05:30","permalink":"https://anooptube.in/page/about/","tags":["about","me"],"title":"About"},{"categories":null,"contents":"Types Of Access Specifiers Public Private Protected Related videos link 1. Public public members can be access from any part of the program.\nclass Rectangle { public: Rectangle() { length = 0; width = 0; } Rectangle(double l, double w) { length = l; width = w; } double getArea() { return length * width; } double length, width; }; int main(int argc, char const *argv[]) { Rectangle r1(10,20); std::cout \u0026lt;\u0026lt; \u0026#34;length :\u0026#34; \u0026lt;\u0026lt; r1.","date":"2022-11-17T23:12:05+05:30","permalink":"https://anooptube.in/blog/post1/","tags":["cpp","c++","access_modifiers"],"title":"Access Modifiers/Specifiers"}]